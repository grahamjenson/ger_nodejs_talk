doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Streaming into PostGres

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Scalable Architecture DR CoN
        h2 Docker, Registrator, Consul, Consul Template and Nginx

      section
        h2 Docker
        img(src="images/docker.png")
        
      section
        h2 Docker
        p Docker is a nice API wrapper around Linux containers,

      section
        h2 Installing Docker
        pre.language-bash.
          apt-get install docker

      section
        h2 Installing Docker OSX
        pre.language-bash.
          brew install boot2docker
          boot2docker init  
          boot2docker up
        h3 Setup
        pre.language-bash.
          export DOCKER_IP=`boot2docker ip`  
          export DOCKER_HOST=`boot2docker socket` 

      section
        h2 Testing Docker
        pre.language-bash.
          docker ps

      section
        h2 Example Docker Service
        pre.language-bash.
          FROM  python:3  
          EXPOSE  80  
          CMD ["python", "-m", "http.server"]

      section
        h2 Building Docker Service
        pre.language-bash.
          docker build -t python/server .
      
      section
        h2 Running Docker Service
        pre.language-bash.
          docker run -i -t -p 8000:80 python/server
      
      section
        h2 Testing Docker Service
        pre.language-bash.
          curl $DOCKER_IP:8000



      section
        h2 Consul
        img(src="images/consul.png")

      section
        h2 Consul
        p is a service that has a DNS and HTTP api. It can also health check services, cluster across multiple machines and is as a key-value store.


      section
        h2 Running Consul
        pre.language-bash.
          docker run -it -h node \
           -p 8500:8500 \
           -p 8600:53/udp \
           progrium/consul \
           -server \
           -bootstrap \
           -advertise $DOCKER_IP \
           -log-level debug

      section
        h2 Testing Consul
        p Web Service running at $DOCKER_IP:8500

      section
        h2 Testing Consul
        pre.language-bash.
          curl -XPUT \
          $DOCKER_IP:8500/v1/agent/service/register \
          -d '{
           "ID": "simple_instance_1",
           "Name":"simple",
           "Port": 8000, 
           "tags": ["tag"]
          }'

      section
        h2 Testing Consul
        pre.language-bash.
          dig @$DOCKER_IP -p 8600 simple.service.consul

      section
        h2 Testing Consul with SRV
        pre.language-bash.
          dig @$DOCKER_IP -p 8600 SRV simple.service.consul
        p Using SRV records can be pretty difficult, not many things support them

      section
        h2 Registrator
        p takes environment variables defined when a Docker container is started and registers it with Consul.

      section
        h2 Running Registrator
        pre.language-bash.
          docker run -it \
          -v /var/run/docker.sock:/tmp/docker.sock \
          -h $DOCKER_IP progrium/registrator \
          consul://$DOCKER_IP:8500

      section
        h2 Testing Registrator
        pre.language-bash.
          docker run -it \
          -e "SERVICE_NAME=simple" \
          -p 8000:80 python/server

      section
        h2 Consul Template
        img(src="images/consul-template.png")
      
      section
        h2 Consul Template
        p uses Consul to update files and execute commands when it detects the services in Consul have changed

      section
        h2 DR CoN 
        p Use Registrator to register services with Consul, Consul Template to rewrite an Nginx config, to load-balance across multiple services 

      section
        pre.language-bash.
          FROM nginx:1.7

          #Install Curl
          RUN apt-get update -qq && apt-get -y install curl

          #Link to Consul Template Binary
          ENV CT_URL http://bit.ly/15uhv24

          #Install Consul Template
          RUN curl -L $CT_URL | \
          tar -C /usr/local/bin --strip-components 1 -zxf -

          #Setup Consul Template Files
          RUN mkdir /etc/consul-templates
          ENV CT_FILE /etc/consul-templates/nginx.conf

          #Setup Nginx File
          ENV NX_FILE /etc/nginx/conf.d/app.conf

          #Default Variables
          ENV CONSUL consul:8500
          ENV SERVICE consul-8500

          # Command will
          # 1. Write Consul Template File
          # 2. Start Nginx
          # 3. Start Consul Template

          CMD echo "upstream app {                 \n\
            least_conn;                            \n\
            {{range service \"$SERVICE\"}}         \n\
            server  {{.Address}}:{{.Port}};        \n\
            {{else}}server 127.0.0.1:65535;{{end}} \n\
          }                                        \n\
          server {                                 \n\
            listen 80 default_server;              \n\
            location / {                           \n\
              proxy_pass http://app;               \n\
            }                                      \n\
          }" > $CT_FILE; \
          /usr/sbin/nginx -c /etc/nginx/nginx.conf \
          & CONSUL_TEMPLATE_LOG=debug consul-template \
            -consul=$CONSUL \
            -template "$CT_FILE:$NX_FILE:/usr/sbin/nginx -s reload";

      section
        h2 Building DR CoN 
        pre.language-bash.
          docker build -t drcon .

      section
        h2 Running DR CoN
        pre.language-bash.
          docker run -it \
          -e "CONSUL=$DOCKER_IP:8500" \
          -e "SERVICE=simple" \
          -p 80:80 drcon

      section
        h2 Testing DR CoN
        pre.language-bash.
          docker run -it \
          -e "SERVICE_NAME=simple" \
          -p 8000:80 python/server
        pre.language-bash.
          curl $DOCKER_IP:80

      section 
        h2 More Testing of DR CoN
        pre.language-bash.
          while true; do curl $DOCKER_IP:80; sleep 1; done
      
      section
        h2 Conclusion
        h3 Docker is very fun

      section
        h2 Graham Jenson
        h3 @GrahamJenson
        h3 https://github.com/grahamjenson
        h3 http://maori.geek.nz
        h3 Node.js Wellington

    script(src='build/build.js')